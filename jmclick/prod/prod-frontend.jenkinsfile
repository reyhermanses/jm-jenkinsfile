def gitRepo = "http://bitbucket.jasamarga.co.id:7990/scm/jc/jm-click-frontend.git"
def gitRepo2 = "http://bitbucket.jasamarga.co.id:7990/scm/jen/dockerfile.git"
def branch = "master"
//artifactory
def url = 'http://10.1.3.177:8082/artifactory/'
def repo = "jmclick"
def jfrogurl = "jfrogartifactory.jasamarga.co.id"

def appName = "jmclick-fe"
def tagName = env.tag

def ocpurl = "https://api.ocprd.jasamarga.co.id:6443"
def isNotNewApp = false
def ocpproject = "jmclick-prd"

def yarnDir = "/opt/yarn/bin"

def sonarUrl = "http://10.1.3.189:9000"

pipeline {
    agent {
        label 'master'
    }
    environment {
        GIT_CREDENTIALS = credentials('bitbucket-admin')
    }
    tools {
        nodejs "nodejs16"
    }
    stages {
        stage('Clone') {
            steps {
                script{
                    cleanWs()
                    // checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: 'bitbucket-admin', url: "${gitRepo}"]], branches: [[name: "${branch}"]]]
                    
                    sh"""
                        git config --global credential.username $GIT_CREDENTIALS_USR
                        git config --global credential.helper "!echo password=$GIT_CREDENTIALS_PSW; echo"

                        git clone ${gitRepo}

                        mv  ${WORKSPACE}/jm-click-frontend/* ${WORKSPACE}
                        mv ${WORKSPACE}/jm-click-frontend/.[!.]* ${WORKSPACE}

                        rm -rf ${WORKSPACE}/jm-click-frontend
                    """  
                    sh"""
                        yarn install
                        yarn run build
                    """
                    echo "success step 1"
                }
            }
        }
        
        stage('create image and push artifactory') {
            steps {
                script{
                    sh"""
                        git config --global credential.username $GIT_CREDENTIALS_USR
                        git config --global credential.helper "!echo password=$GIT_CREDENTIALS_PSW; echo"

                        git clone ${gitRepo2}

                        cp ${WORKSPACE}/dockerfile/jmclick/Dockerfile-Frontend ${WORKSPACE}
                        cp ${WORKSPACE}/dockerfile/jmclick/configuration/frontend/nginx.conf ${WORKSPACE}

                        rm -rf ${WORKSPACE}/dockerfile
                    """  

                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'devops-artifactory',usernameVariable: 'artifactoryUsername', passwordVariable: 'artifactoryPassword']]) { 
                        sh"""
                            sudo podman login -u ${artifactoryUsername} -p ${artifactoryPassword} ${jfrogurl}
                            sudo podman build -t  ${jfrogurl}/${repo}/${appName}:${tagName} -f ${WORKSPACE}/Dockerfile-Frontend
                            sudo podman push ${jfrogurl}/${repo}/${appName}:${tagName}
                        """
                    } 
                    echo "success step 3"
                }
            }
        }
        
        stage('Deployment To OCP') {
            steps {
                script{
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ocp-prd',usernameVariable: 'ocpUsername', passwordVariable: 'ocpPassword']]) { 
                        sh"""
                            oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
                            oc project ${ocpproject}
                        """
                        String pod = sh(script:"oc get pod", returnStdout: true).toString().trim()
                        echo "value pod "+pod
                        if(pod.contains("${appName}")){
                            isNotNewApp = true
                        }else{
                            isNotNewApp = false
                        }
                        if(isNotNewApp){
                            sh"""
                                oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
                                oc project ${ocpproject}
                                oc delete deploy ${appName}
                                oc delete service ${appName}
                                oc delete route ${appName}
                            """
                            try{
                                sh"""
                                    oc delete istag ${appName}:${tagName}
                                """
                            }catch(Exception e){
                                echo "new tag"
                            }
                            sleep 120
                            sh"""
                                oc new-app --docker-image=${jfrogurl}/${repo}/${appName}:${tagName}
                                oc expose service/${appName} --port=8079-tcp
                                oc scale deploy/${appName} --replicas=3
                                oc logout
                            """
                        }else{
                            try{
                                sh"""
                                    oc delete istag ${appName}:${tagName}
                                """
                            }catch(Exception e){
                                echo "new tag"
                            }
                            sh"""
                                oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
                                oc project ${ocpproject}
                                oc new-app --docker-image=${jfrogurl}/${repo}/${appName}:${tagName}
                                oc expose service/${appName} --port=8079-tcp
                                oc scale deploy/${appName} --replicas=3
                                oc logout
                            """
                        }
                    }
                    echo "success step 4"
                }
            }
        }
    }
}
