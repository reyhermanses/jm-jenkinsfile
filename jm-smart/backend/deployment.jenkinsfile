def buildType = env.buildType

// project source code
def projectRepo = "git@gitlab.jasamarga.co.id:jm-smart/BE-JMSmart.git"
def branch = env.branch

// artifactory
def url = 'http://10.1.3.177:8082/artifactory/'
def repo = "jm-smart"
def jfrogurl = "jfrogartifactory.jasamarga.co.id"
def tagName = env.tag
def appName = "be-jm-smart"

def ip = "10.1.12.33"
def envPath = "/var/www/html/jmsmart-docker/backend/env"

pipeline {
    agent {
        label 'master'
    }
    environment {
        GIT_CREDENTIALS = credentials('gitlab-root')
        DISCORD_URL = credentials('discord-webhook')
        LAST_COMMIT_AUTHOR = ''
        LAST_COMMIT_MESSAGE = ''
    }
    stages {
        stage('clone') {
            steps {
                script{
                    cleanWs()
                    discordSend description: "Job Started", footer: "JM SMART Backend Development", link: env.BUILD_URL, result: currentBuild.currentResult, title: "JM SMART Backend Build ID ${env.BUILD_ID} ðŸš€", webhookURL: DISCORD_URL
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: 'gitlab-ssh-root', url: "${projectRepo}"]], branches: [[name: "${branch}"]]]                  
                    def commitInfo = sh(script: 'git log -1 --pretty=format:"%H %an %s"', returnStdout: true).trim()

                    // Split the commit information into parts
                    def commitParts = commitInfo.split(' ')
                    def lastCommitHash = commitParts[0]
                    def lastCommitAuthor = commitParts[1]
                    def lastCommitMessage = commitParts[2..-1].join(' ')

                    LAST_COMMIT_AUTHOR = lastCommitAuthor
                    LAST_COMMIT_MESSAGE = lastCommitMessage
                    echo "success pull repository"
                }
            }
        }

        stage('create and push artifact') {
            steps {
                script{
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'devops-artifactory',usernameVariable: 'artifactoryUsername', passwordVariable: 'artifactoryPassword']]) { 
						sh"""
							sudo podman login -u ${artifactoryUsername} -p ${artifactoryPassword} ${jfrogurl}
							sudo podman build -t  ${jfrogurl}/${repo}/${appName}:${tagName} -f "${WORKSPACE}/Dockerfile"
							sudo podman push ${jfrogurl}/${repo}/${appName}:${tagName}
						"""
					}

                    echo "success creating image artifact"
                }
            }
        }
        
        stage('deployment') {
            when {
                expression { buildType == 'build-artifact-and-deploy' }
            }
            steps {
                script{
                    sshagent(credentials: ['ssh-10.1.12.238']) {
                        // Inside the SSH agent, run SSH command to change directory
                        sh """
                            ssh root@${ip} "
                            docker pull ${jfrogurl}/${repo}/${appName}:${tagName}; 
                            docker kill jm-smart-backend 2>&1 >/dev/null;
                            docker rm jm-smart-backend 2>&1 >/dev/null;
                            docker run --env-file=${envPath} -d -p 8001:8181 --name=jm-smart-backend ${jfrogurl}/${repo}/${appName}:${tagName};
                            docker image prune -a -f;"
                        """
                    }
                    echo "success deployment"
                }
            }
        }
    }
    
    post {
        always{
            cleanWs()
            script{
                try{
                    sh"""
                        docker builder prune -af
                    """
                }catch(Exception e){
                    echo"clean workspace success"
                }
            }
        }
    }
}
