/*
 * parameter should exists : 
 * - branch     = string default(master) 
 * - tag        = string default(latest)
 * - buildType  = dropdown [rebuild-and-push-to-artifactory | build-only | pull-only | deploy-only-to-ocp]
 * - restartPod = boolean
 *
 */

// project source code
def projectRepo = "ssh://git@10.1.3.180:7999/aroma/aroma-backend.git"
def branch = env.branch

// artifactory
def url = 'http://10.1.3.177:8082/artifactory/'
def repo = "aroma-backend"
def jfrogurl = "jfrogartifactory.jasamarga.co.id"
def tagName = env.tag

// sonarqube
def sonarUrl = "http://10.1.3.189:9000"

// ocp 
def ocpurl = "https://api.ocdev.jasamarga.co.id:6443/"
def ocpproject = "aroma"
def appName = "aroma-backend"
def configMapName = "aroma-backend-configmap"
def isNotNewApp = false
def appUrl = '' // updated after deployed to ocp
def webhookKey = 'aroma-backend'

// deployment file
def repoDeploymentFile = "https://gitlab.jasamarga.co.id:8081/riandycandra/devops-deployment-ocp.git"
def deploymentPath = "aroma/backend.yaml"
def deploymentFile = "backend.yaml"

// jenkins param
def buildType = env.buildType
def restartPod = env.restartPod

pipeline {
    agent {
        label 'master'
    }
    environment {
        GIT_CREDENTIALS = credentials('gitlab-root')
    }
    stages {
        stage('Clone') {
            steps {
                script{
                    cleanWs()
                    sh """
                    id
                    """
                    checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[credentialsId: 'bitbucket-riandycandra-ssh', url: "${projectRepo}"]], branches: [[name: "${branch}"]]]
                    echo "success step 1"
                }
            }
        }
        stage('SonarQube Scan') {
            steps {
                script{
                    // sh"""
                    //     /app/sonar-scanner/bin/sonar-scanner \
                    //     -D"sonar.projectKey=JIMMS" \
                    //     -D"sonar.sources=." \
                    //     -D"sonar.host.url=${sonarUrl}" \
                    //     -D"sonar.login=e69af734753e3cde8a8f6af99df18ae327a31182"
                    // """

                    // def status = sh(script:"curl http://admin:S0narqub3!@10.1.3.189:9000/api/qualitygates/get_by_project?project=JIMMS", returnStdout: true).trim()
                    // if(status.contains("false")){
                    //     error("Hasil Scanning Sonarqube Failed")
                    // }
                    echo "success step 3"
                }
            }
        }

        stage('create image and push artifactory') {
            steps {
                script{

                    sh"""
                        git config --global credential.username $GIT_CREDENTIALS_USR
                        git config --global credential.helper "!echo password=$GIT_CREDENTIALS_PSW; echo"

                        git clone ${repoDeploymentFile}

                        mv "${WORKSPACE}/devops-deployment-ocp/${deploymentPath}" "${WORKSPACE}"
                        rm -rf "${WORKSPACE}/devops-deployment-ocp"
                    """

                    if(env.buildType == 'rebuild-and-push-to-artifactory' || env.buildType == 'build-only') {
						withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'devops-artifactory',usernameVariable: 'artifactoryUsername', passwordVariable: 'artifactoryPassword']]) { 
							sh"""
								sudo podman login -u ${artifactoryUsername} -p ${artifactoryPassword} ${jfrogurl}
								sudo podman build -t  ${jfrogurl}/${repo}/${appName}:${tagName} -f "${WORKSPACE}/Dockerfile"
								sudo podman push ${jfrogurl}/${repo}/${appName}:${tagName}
							"""
						}
					}

                    if(env.buildType == 'pull-only') {
                        sh """
							curl ${appUrl}/gitlab-webhook?key=${webhookKey}
						"""
                    }

                    echo "success step 4"
                }
            }
        }
        
        stage('Deployment To OCP') {
            steps {
                script{
                    if(env.buildType == 'rebuild-and-push-to-artifactory' || env.buildType == 'deploy-only-to-ocp') {
						withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ocp-dev',usernameVariable: 'ocpUsername', passwordVariable: 'ocpPassword']]) { 
							try{
								sh"""
									oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
									oc project ${ocpproject}
									oc delete istag ${appName}:${tagName}
								"""
							}catch(Exception e){
								echo "new tag"
							}
							sh """
								oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
								oc project ${ocpproject}
								oc adm policy add-scc-to-user anyuid -z default
								sed -i 's,{NAMESPACE},${ocpproject},g' "$WORKSPACE/${deploymentFile}"
								sed -i 's,{CONFIGMAP_NAME},${configMapName},g' "$WORKSPACE/${deploymentFile}"
								sed -i 's,{IMAGE_DEPLOY},${jfrogurl}/${repo}/${appName}:${tagName},g' "$WORKSPACE/${deploymentFile}"
								oc apply  -n '${ocpproject}' -f "$WORKSPACE/${deploymentFile}"
                                oc annotate route ${appName} --overwrite haproxy.router.openshift.io/timeout=5000s
                                oc set resources deploy/${appName} --limits=cpu=1,memory=1Gi --requests=cpu=100m,memory=500Mi
								oc rollout status deployment/'${appName}' -n '${ocpproject}'
								oc logout
								sudo podman rmi ${jfrogurl}/${repo}/${appName}:${tagName}
							"""
						}
					}

					if(env.restartPod == 'true') {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ocp-dev',usernameVariable: 'ocpUsername', passwordVariable: 'ocpPassword']]) { 
                            try {
                                sh """
                                    oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
									oc project ${ocpproject}
                                    oc rollout restart deployment/'${appName}' 
                                """
                            } catch(Exception e) {
                                echo ${e}
                            }
                        }
					}
                    echo "success step 5"
                }
            }
        }
    }
}
