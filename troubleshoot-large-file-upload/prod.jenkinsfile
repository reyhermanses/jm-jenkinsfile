/*
 * parameter should exists : 
 * - branch     = string default(master) 
 * - tag        = string default(latest)
 * - buildType  = choice [rebuild-and-push-to-artifactory | build-only | pull-only | deploy-only-to-ocp]
 * - restartPod = boolean
 *
 */

// artifactory
def url = 'http://10.1.3.177:8082/artifactory/'
def repo = "troubleshoot-large-file-upload"
def jfrogurl = "jfrogartifactory.jasamarga.co.id"
def tagName = env.tag

// sonarqube
def sonarUrl = "http://10.1.3.189:9000"

// ocp 
def ocpurl = "https://api.ocprd.jasamarga.co.id:6443/"
def ocpproject = "troubleshoot-large-file-upload"
def appName = "service"
def configMapName = "troubleshoot-large-file-upload-configmap"
def isNotNewApp = false
def webhookKey = 'jimms'

// deployment file
def repoDeploymentFile = "https://bitbucket.jasamarga.co.id:8081/riandycandra/devops-deployment-ocp.git"
def deploymentPath = "troubleshoot-large-file-upload/troubleshoot-large-file-upload.yaml"
def deploymentFile = "troubleshoot-large-file-upload.yaml"

pipeline {
    agent {
        label 'master'
    }
    environment {
        GIT_CREDENTIALS = credentials('gitlab-root')
    }
    stages {

        stage('Preparation') {
            steps {
                script{

                    sh"""
                        git config --global credential.username $GIT_CREDENTIALS_USR
                        git config --global credential.helper "!echo password=$GIT_CREDENTIALS_PSW; echo"

                        git clone ${repoDeploymentFile}

                        mv "${WORKSPACE}/devops-deployment-ocp/${deploymentPath}" "${WORKSPACE}"
                        rm -rf "${WORKSPACE}/devops-deployment-ocp"
                    """

                    echo "success step 4"
                }
            }
        }
        
        stage('Deployment To OCP') {
            steps {
                script{
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ocp-prd',usernameVariable: 'ocpUsername', passwordVariable: 'ocpPassword']]) { 
                        try{
                            sh"""
                                oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
                                oc project ${ocpproject}
                                oc delete istag ${appName}:${tagName}
                            """
                        }catch(Exception e){
                            echo "new tag"
                        }
                        sh """
                            oc login ${ocpurl} -u ${ocpUsername} -p ${ocpPassword}
                            oc project ${ocpproject}
                            oc adm policy add-scc-to-user anyuid -z default
                            sed -i 's,{NAMESPACE},${ocpproject},g' "$WORKSPACE/${deploymentFile}"
                            sed -i 's,{CONFIGMAP_NAME},${configMapName},g' "$WORKSPACE/${deploymentFile}"
                            sed -i 's,{IMAGE_DEPLOY},${jfrogurl}/${repo}/${appName}:${tagName},g' "$WORKSPACE/${deploymentFile}"
                            oc apply  -n '${ocpproject}' -f "$WORKSPACE/${deploymentFile}"
                            oc annotate route ${appName} --overwrite haproxy.router.openshift.io/timeout=300s
                            oc rollout restart deployment/'${appName}' -n '${ocpproject}'
                            oc logout
                        """
                    }
                    echo "success step 5"
                }
            }
        }
    }
}
